/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/Linda.glb -o src/components/Lin.jsx -r public 
*/

import React, { useEffect, useRef,useState,forwardRef, useImperativeHandle } from 'react';
import { useAnimations,useGLTF, useFBX } from '@react-three/drei';

const Linda = forwardRef((props,ref) => {
  const { currentAnimation="Waiting", speakingSpeed=250} = props;

  const [count, setCount] = useState(0);

  const { nodes, materials } = useGLTF('/models/Linda.glb');
  const { animations: WaitingAnimation } = useFBX("/animations/Waiting.fbx");
  const { animations: GreetingAnimation } = useFBX("/animations/Greeting.fbx");
  const { animations: TalkingAnimation } = useFBX("/animations/Talking.fbx");
  //const { animations: DancingAnimation } = useFBX("/animations/Dancing.fbx");

  WaitingAnimation[0].name = "Waiting";
  GreetingAnimation[0].name = "Greeting";
  TalkingAnimation[0].name = "Talking";
  //DancingAnimation[0].name = "Dancing";

  const group = useRef();
  const { actions } = useAnimations(
    [WaitingAnimation[0], GreetingAnimation[0], TalkingAnimation[0]],
    group
  );

  const [animation, setAnimation] = useState(currentAnimation);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  useEffect(()=>{
    //console.log("nodes.Wolf3D_Head.morphTargetDictionary",nodes.Wolf3D_Head.morphTargetDictionary);
    //console.log("nodes.Wolf3D_Head.morphTargetDictionary[mouthOpen]",nodes.Wolf3D_Head.morphTargetDictionary["mouthOpen"]);
    //nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["mouthSmile"]]=0;
    //group.current.morphTargetInfluences[0] = 1;

    let timer;
    if (animation == 'Talking') {
      timer = setInterval(() => {
        // if(count === 1){
        //   setCount(prevCount => prevCount-1);
        // }else{
        //   setCount(prevCount => prevCount+1);
        // }
        // console.log("count=",count);
        let aux = nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["mouthOpen"]];
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["mouthOpen"]]=aux===1?0:1;
      }, speakingSpeed); // Actualiza el contador cada segundo (1000 ms)
    } else {
      clearInterval(timer);
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["mouthOpen"]]=0;
    }
    return () => clearInterval(timer);

  },[animation]);

  useImperativeHandle(ref, () => ({
    getAlert(newAnimation) {
      //alert("getAlert from Child");
      setAnimation(newAnimation);
    }
  }));

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  )
});
export default Linda;
useGLTF.preload('/models/Linda.glb');
